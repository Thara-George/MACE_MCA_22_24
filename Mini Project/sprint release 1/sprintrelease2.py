# -*- coding: utf-8 -*-
"""sprintrelease2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xGn3Ce3_GjQB4DJT2RsBVJkt7fG0rAGq

# **Split the dataset**
"""

import pandas as pd
data = pd.read_csv('/content/Heart_disease_cleveland_new.csv')

X = data.drop('target', axis=1)  # Features (all columns except the target)
Y = data['target']

from sklearn.model_selection import train_test_split

# Assuming 'X' is your feature matrix and 'y' is your target variable.
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)

"""# **Training the Model**

# ***Using Random Forest***
"""

#import necessary libraries
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, log_loss
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score

#create a random forest classifier
random_forest = RandomForestClassifier(n_estimators=100, random_state=42)

#train the model
random_forest.fit(X_train, y_train)

#make predictions
y_pred = random_forest.predict(X_test)

#evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

#precision
from sklearn.metrics import precision_score
precision = precision_score(y_test, y_pred)
print(precision)

#recall
recall =  recall_score(y_test, y_pred)
print(recall)

#confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)

#f1 score
f1 = f1_score(y_test,y_pred)
print(f1)

#cross entropy loss
log_loss_value = log_loss(y_test, random_forest.predict_proba(X_test))
print("Log Loss:", log_loss_value)

"""# ***Using KNN***"""

#import necessary libraries
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Create a KNN classifier with a specified number of neighbors (k)
knn = KNeighborsClassifier(n_neighbors=5)

#train the model
knn.fit(X_train, y_train)

#make predictions
y_pred = knn.predict(X_test)

#evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

#loss
loss = 1 - accuracy
print("0-1 Loss:", loss)

from sklearn.metrics import confusion_matrix

# Make predictions with your KNN model
y_pred = knn.predict(X_test)

# Create the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Display the confusion matrix
print("Confusion Matrix:")
print(conf_matrix)

#precision
from sklearn.metrics import precision_score
precision = precision_score(y_test, y_pred)
print(precision)

#recall
recall =  recall_score(y_test, y_pred)
print(recall)

#f1 score
f1 = f1_score(y_test,y_pred)
print(f1)

import joblib

# Save the trained model to a pickle file
joblib.dump(y_pred, 'heart_disease_model.pkl')